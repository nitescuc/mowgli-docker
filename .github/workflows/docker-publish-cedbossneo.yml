name: Cedbossneo

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  #schedule:
  #  - cron:  '30,0 * * * *'
  workflow_dispatch:
    inputs:
      ignoreCommits:
        description: 'Ignore commits (y/n)?'
        required: true
        default: 'y'
  push:
    branches: [ "cedbossneo" ]
    paths:
      - docker/openmower/**
      - .github/workflows/docker-publish-cedbossneo.yml


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}


jobs:
  build:
    outputs:
      needs-update: ${{ steps.check.outputs.needs-update }}
    strategy:
      fail-fast: false
      matrix:
        arch: [ linux/arm64 , linux/amd64 ]
    name: Build - cedbossneo - ${{matrix.arch}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Check if update available
        id: check
        uses: cedbossneo/container-image-updater-action@v1.0.8
        with:
          base-image: ghcr.io/clemenselflein/open_mower_ros:main
          image: ${{ env.REGISTRY_IMAGE }}:cedbossneo
          platform: ${{ matrix.arch }}
          image-reg-username: ${{ github.actor }}
          image-reg-password: ${{ secrets.SECRET_TOKEN }}
      
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_TOKEN }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU (arm64)
        if: runner.arch != 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up QEMU (x64)
        if: runner.arch != 'x64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64

      - name: Checkout repository
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: actions/checkout@v3

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up Docker Buildx
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: docker/setup-buildx-action@v2

          # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        with:
          platforms: ${{ matrix.arch }}
          context: docker/openmower
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          labels: ${{ steps.meta.outputs.labels }}

      - name: Export digest
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build-and-push.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        if: steps.check.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.SECRET_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        if: needs.build.outputs.needs-update == 'true' || github.event.inputs.ignoreCommits == 'y'
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
